% \iffalse meta-comment
%
% Copyright (C) 2022 by Zhang Tingxuan <alphaztx@163.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3c of this license or (at your option) any later
% version. The latest version of this license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of
% LaTeX version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Zhang Tingxuan.
%
% This work consists of the files fixdif.dtx,
%           and the derived files fixdif.ins,
%                                 fixdif.sty,
%                                 fixdif.pdf,
%                                 fixdif-zh-cn.pdf,
%                                 README.md,
%                             and README-zh-cn.md.
%
%<*internal>
\iffalse
%</internal>
%
%<*readme>
# The `fixdif` Package

The `fixdif` package provides an interface for defining the style of differential operators.

The basic commands are:

- `\d`: for differential operator "d" in math mode and under-dot accent in text;
- `\partial`: a "fixed" partial differential operator command;
- `\letdif`: an interface for defining new commands for differential operators;
- `\mathdif`: a commmand in math mode, you can use it just like `\mathop`, etc.

See `fixdif.pdf` for more. Happy TeXing!

## License

This work may be distributed and/or modified under the conditions of 
the [LaTeX Project Public License](http://www.latex-project.org/lppl.txt), 
either version 1.3c of this license or (at your option) any later version.

------

Copyright (C) 2022 by Zhang Tingxuan <alphaztx@163.com>.
%</readme>
%
%<*readme-zh-cn>
# `fixdif` 宏包

`fixDif`宏包提供了一个用于定义微分算子样式的接口.

基本命令如下:

- `\d`: 既是数学模式下的微分算子"d"，又是文本中的下点重音；
- `\partial`: “修正”偏微分算子命令；
- `\letdif`: 用于定义微分算子的新命令的接口；
- `\mathdif`: 数学模式下的命令，你可以像`\mathop`等命令一样使用。

更多信息请参考 `fixdif-zh-cn.pdf`。 Happy TeXing!

## 许可证

本作品可以在 [LaTeX Project Public License](http://www.latex-project.org/lppl.txt)
的条件下分发和/或修改，可以是本许可证的1.3c版本，也可以是（根据您的选择）任何更高版本。

------

Copyright (C) 2022 by Zhang Tingxuan <alphaztx@163.com>.
%</readme-zh-cn>
%
%<*internal>
\fi
\begingroup
  \def\NameOfLaTeXe{LaTeX2e}
\expandafter\endgroup\ifx\NameOfLaTeXe\fmtname\else
\csname fi\endcsname
%</internal>
%
%<*install>
\input docstrip.tex
\keepsilent

\preamble

  Copyright (C) 2022 by Zhang Tingxuan <alphaztx@163.com>

  This work may be distributed and/or modified under the
  conditions of the LaTeX Project Public License, either
  version 1.3c of this license or (at your option) any later
  version. The latest version of this license is in:

    http://www.latex-project.org/lppl.txt

  and version 1.3 or later is part of all distributions of
  LaTeX version 2005/12/01 or later.
 
  This work has the LPPL maintenance status `maintained'.
 
  The Current Maintainer of this work is Zhang Tingxuan.

  This work consists of the files fixdif.dtx,
            and the derived files fixdif.ins,
                                  fixdif.sty,
                                  fixdif.pdf,
                                  fixdif-zh-cn.pdf,
                                  README.md,
                              and README-zh-cn.md.

\endpreamble

\generate{
  \usedir{tex/latex/fixdif}
    \file{\jobname.sty}      {\from{\jobname.dtx}{package}}
%</install>
%<*internal>
  \usedir{source/latex/fixdif}
    \file{\jobname.ins}      {\from{\jobname.dtx}{install}}
%</internal>
%<*install>
  \usedir{doc/latex/fixdif}
  \file{\jobname.tex}{\from{\jobname.dtx}{driver}}
  \file{\jobname-zh-cn.tex}{\from{\jobname.dtx}{driver-zh-cn}}
  \nopreamble\nopostamble
    \file{README.md}         {\from{\jobname.dtx}{readme}}
    \file{README-zh-cn.md}         {\from{\jobname.dtx}{readme-zh-cn}}
}

\obeyspaces
\Msg{****************************************************}
\Msg{*                                                  *}
\Msg{* To finish the installation you have to move the  *}
\Msg{* following file into a directory searched by TeX: *}
\Msg{*                                                  *}
\Msg{*     fixdif.sty                                   *}
\Msg{*                                                  *}
\Msg{* The recommended directory is                     *}
\Msg{*   TDS:tex/latex/fixdif                           *}
\Msg{*                                                  *}
\Msg{* To produce the documentation run the file        *}
\Msg{* fixdif.dtx through pdfLaTeX/XeLaTeX/LuaLaTeX.    *}
\Msg{*                                                  *}
\Msg{* Happy TeXing!                                    *}
\Msg{*                                                  *}
\Msg{****************************************************}

\endbatchfile
%</install>
%
%<*internal>
\fi
%</internal>
%
%<*driver>
\ProvidesFile{fixdif.dtx}[2022/7/19 (c) Copyright 2022 by Zhang Tingxuan]
\expandafter\ifx\csname ifenglish\endcsname\relax
    \expandafter\newif\csname ifenglish\endcsname
    \englishtrue
\fi
\documentclass{ltxdoc}

\usepackage{xcolor}
\definecolor{titlecolor}{RGB}{0,12,160}
\usepackage{doc}
\usepackage{fancyvrb}
\fvset{xleftmargin=2.5em,fontsize=\small,gobble=2}
\MakeShortVerb|

\usepackage{hologo}
\def\XeTeX{\hologo{XeTeX}}
\def\LuaTeX{\hologo{LuaTeX}}

\def\pkg{\textsf}
\def\opt{\texttt}

\title{The \pkg{fixdif} Package}
\author{Zhang Tingxuan}
\date{2022/7/19\quad Version 1.3a\thanks{\url{https://github.com/AlphaZTX/fixdif}}}

\usepackage{hyperref}
\hypersetup{
  pdftitle   = {The fixdif Package},
  pdfauthor  = {Zhang Tingxuan},
  pdfcreator = {pdfLaTeX/XeLaTeX/LuaLaTeX},
  linkcolor  = black,
  urlcolor   = titlecolor!80!black,
}
\def\pkg{\textsf}

\makeatletter
\renewcommand\section{\@startsection{section}{1}{\z@}%
  {-2.5ex plus -1ex minus -.2ex}%
  {1ex plus .2ex}%
  {\normalfont\Large\bfseries\color{titlecolor}}}
\renewcommand\subsection{\@startsection{subsection}{2}{\z@}%
  {-2ex plus -1ex minus -.2ex}%
  {.5ex plus .2ex}%
  {\normalfont\normalsize\bfseries\color{titlecolor}}}
\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
  {.8ex plus .4ex minus .2ex}%
  {-1em}%
  {\normalfont\normalsize\bfseries\color{titlecolor}}}
\def\UrlAlphabet{%
      \do\a\do\b\do\c\do\d\do\e\do\f\do\g\do\h\do\i\do\j%
      \do\k\do\l\do\m\do\n\do\o\do\p\do\q\do\r\do\s\do\t%
      \do\u\do\v\do\w\do\x\do\y\do\z\do\A\do\B\do\C\do\D%
      \do\E\do\F\do\G\do\H\do\I\do\J\do\K\do\L\do\M\do\N%
      \do\O\do\P\do\Q\do\R\do\S\do\T\do\U\do\V\do\W\do\X%
      \do\Y\do\Z}
\def\UrlDigits{\do\1\do\2\do\3\do\4\do\5\do\6\do\7\do\8\do\9\do\0}
\g@addto@macro{\UrlBreaks}{\UrlOrds}
\g@addto@macro{\UrlBreaks}{\UrlAlphabet}
\g@addto@macro{\UrlBreaks}{\UrlDigits}
\ifdefined\Umathcode
  \usepackage{unicode-math}
  \setmathfont{Latin Modern Math}
\fi
\makeatother

\usepackage{fixdif}

\linespread{1.05}
\parskip6pt plus 2pt minus 1pt
\parindent2.5em

\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
%<*driver-zh-cn>
\ProvidesFile{fixdif.dtx}[2022/7/19 (c) Copyright 2022 by Zhang Tingxuan]
\expandafter\ifx\csname ifenglish\endcsname\relax
    \expandafter\newif\csname ifenglish\endcsname
    \englishfalse
\fi
\documentclass{ctxdoc}

\usepackage{xcolor}
\definecolor{titlecolor}{RGB}{0,12,160}
\usepackage{doc}
\usepackage{fancyvrb}
\fvset{xleftmargin=2.5em,fontsize=\small,gobble=2}
\MakeShortVerb|

\usepackage{hologo}
\def\XeTeX{\hologo{XeTeX}}
\def\LuaTeX{\hologo{LuaTeX}}

\def\pkg{\textsf}
\def\opt{\texttt}

\title{The \pkg{fixdif} Package}
\author{Zhang Tingxuan}
\date{2022/7/19\quad Version 1.3a\thanks{\url{https://github.com/AlphaZTX/fixdif}}}

\usepackage{hyperref}
\hypersetup{
  pdftitle   = {The fixdif Package},
  pdfauthor  = {Zhang Tingxuan},
  pdfcreator = {pdfLaTeX/XeLaTeX/LuaLaTeX},
  linkcolor  = black,
  urlcolor   = titlecolor!80!black,
}
\def\pkg{\textsf}

\makeatletter
\renewcommand\section{\@startsection{section}{1}{\z@}%
  {-2.5ex plus -1ex minus -.2ex}%
  {1ex plus .2ex}%
  {\normalfont\Large\bfseries\color{titlecolor}}}
\renewcommand\subsection{\@startsection{subsection}{2}{\z@}%
  {-2ex plus -1ex minus -.2ex}%
  {.5ex plus .2ex}%
  {\normalfont\normalsize\bfseries\color{titlecolor}}}
\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
  {.8ex plus .4ex minus .2ex}%
  {-1em}%
  {\normalfont\normalsize\bfseries\color{titlecolor}}}
\def\UrlAlphabet{%
      \do\a\do\b\do\c\do\d\do\e\do\f\do\g\do\h\do\i\do\j%
      \do\k\do\l\do\m\do\n\do\o\do\p\do\q\do\r\do\s\do\t%
      \do\u\do\v\do\w\do\x\do\y\do\z\do\A\do\B\do\C\do\D%
      \do\E\do\F\do\G\do\H\do\I\do\J\do\K\do\L\do\M\do\N%
      \do\O\do\P\do\Q\do\R\do\S\do\T\do\U\do\V\do\W\do\X%
      \do\Y\do\Z}
\def\UrlDigits{\do\1\do\2\do\3\do\4\do\5\do\6\do\7\do\8\do\9\do\0}
\g@addto@macro{\UrlBreaks}{\UrlOrds}
\g@addto@macro{\UrlBreaks}{\UrlAlphabet}
\g@addto@macro{\UrlBreaks}{\UrlDigits}
\ifdefined\Umathcode
  \usepackage{unicode-math}
  \setmathfont{Latin Modern Math}
\fi
\makeatother

\usepackage{fixdif}

\linespread{1.05}
\parskip6pt plus 2pt minus 1pt
\parindent2.5em

\begin{document}
  \DocInput{fixdif.dtx}
\end{document}
%</driver-zh-cn>
% \fi
% \ifenglish
% \maketitle
%
% \begin{abstract}
% The \pkg{fixdif} package redefines the \cs{d} command in \LaTeX{} 
% and provides an interface to define commands for differential operators.
%
% The package is compatible with pdf\TeX, \XeTeX{} and \LuaTeX. 
% Furthermore, the package is compatible with \pkg{unicode-math} package 
% in \XeTeX{} and \LuaTeX.
% \end{abstract}
%
% \tableofcontents
%
% \section{The background}
% It's usually recommended that one should reserve a small skip between 
% the differential operator and the expression before it\footnote{See 
% \url{https://tex.stackexchange.com/questions/14821/whats-the-proper-way-to-typeset-a-differential-operator}.}. 
% Take the following cases as an example:
% \[f(x)\mathrm{d}x\qquad\mbox{and}\qquad f(x)\d x.\]
% We usually consider that the example on the right side is better than the 
% one on the left side. The little skip between $f(x)$ and $\d x$ can be 
% regarded as a symbol of the product of $f(x)$ and $\d x$. 
%
% So some users prefer to define a macro like this:
% \begin{Verbatim}
% \renewcommand\d{\mathop{\mathrm{d}}\!}
% \end{Verbatim}
% This macro works well in  “行间公式” and “行内公式”, but we still 
% face the following three problems:
% \begin{enumerate}
% \item The skip before ``d'' would still be reserved in ``text fraction'', 
% which is regarded bad. For example, |$\d y/\d x$| produces 
% $\mathrm{d}y/\,\mathrm{d}x$;
%
% \item This |\d| command cannot be used out of math mode. In another word, 
% |\d{o}| would not produce ``\d{o}'' in text;
%
% \item The skip between ``d'' and the expression before it can be regarded 
% as a product operator. A product operator is definitely a binary operator. 
%
% Take |\cdot| ($\cdot$) as an example.
% A binary operator reserves small skips before and after itself when in 
%  “行间公式” or “行内公式” such as $x\cdot y$, but the skips will 
% disappear in ``script math'' or ``script script math'' such as $a^{x\cdot y}$. 
% Thus the small skip should also disappear in script, but |$a^{f(x)\d x}$| 
% still produces $a^{f(x)\,\mathrm{d}x}$ but not $a^{f(x)\d x}$.
% \end{enumerate}
% To solve these problems, you can try this package.
%
% \section{Introduction}
% To load this package, write
% \begin{Verbatim}
% \usepackage{fixdif}
% \end{Verbatim}
% in the preamble. In your document, 
% \begin{Verbatim}
% \[ f(x)\d x,\quad\frac{\d y}{\d x},\quad\d y/\d x,\quad a^{y\d x}. \]
% \end{Verbatim}
% will produce
% \[f(x)\d x,\quad \frac{\d y}{\d x},\quad \d y/\d x,\quad a^{y\d x}.\]
%
% \subsection{When using \pkg{unicode-math}}
% If you are using \pkg{unicode-math} package with \XeTeX/\LuaTeX{} 
% in your document, you must pay attention to the following items:
% \begin{itemize}
% \item If you want to use \pkg{amsmath} package, make sure that the 
% \pkg{unicode-math} package is loaded \emph{after} \pkg{amsmath}. 
%
% \item You had better specify the math font through the \cs{setmathfont} 
% command provided by \pkg{unicode-math} in order to avoid bad skip in  
% text fraction like $\d y/\d x$.
%
% \item Load the \pkg{fixdif} package \emph{after} \pkg{unicode-math}.
% \end{itemize}
% Therefore the correct order is
% \begin{Verbatim}
% \usepackage{amsmath}
% \usepackage{unicode-math}
% \setmathfont{...}[...]
% \usepackage{fixdif}
% \end{Verbatim}
%
% \subsection{When using \pkg{hyperref}}
% If you want to use the \pkg{hyperref} package simultaneously, 
% remember to load \pkg{hyperref} \emph{before} the \pkg{fixdif} package, 
% otherwise the \pkg{hyperref} package will cause conflicts.
%
% \subsection{Basic commands and package options}
% \DescribeMacro{\d}
% The \pkg{fixdif} package provides a \cs{d} command for the differential 
% operator ``d'' in math mode. When in text, \cs{d} behaves just like 
% the old \cs{d} command in \LaTeX{} or plain \TeX{} as an 
% accent command. For example, 
% \begin{Verbatim}
% $\d x$ and \d x
% \end{Verbatim}
% will produce ``$\d x$ and \d x''.
%
% \paragraph{Set the font of \cs{d}}
% There are two basic package options to control the \cs{d}'s style in math 
% mode~--- \opt{rm} and \opt{normal}. The default option is \opt{rm}, in which 
% case |$f(x)\d x$| produces $f(x)\d x$. If you chose the \opt{normal} option, 
% for example
% \begin{Verbatim}
% \usepackage[normal]{fixdif}
% \end{Verbatim}
% |$f(x)\d x$| would produces $f(x)\,dx$.
%
% \DescribeMacro{\resetdfont}
% Besides the previous two optional fonts, you can reset the font of 
% differential operator ``d'' through \cs{resetdfont} command in preamble:
% \begin{Verbatim}
% \resetdfont{\mathsf}
% \end{Verbatim}
% then |\d x| will produce $\mathsf{d}x$.
%
% \paragraph{Control the behavior of \cs{partial}}
% \DescribeMacro{\partial}
% In default, \cs{partial} will also be regarded as a differential operator 
% in this package. If you don't like this default setting, you can use the 
% \opt{nopartial} option:
% \begin{Verbatim}
% \usepackage[nopartial]{fixdif}
% \end{Verbatim}
%
% \section{Define commands for differential operators}
% \noindent\emph{Attention! The commands in this section 
% can be used in preamble only!}
%
% \subsection{Define commands with a single command name}
% \noindent\textcolor{titlecolor}{\cs{letdif}\marg{cmd}\marg{csname}}\DescribeMacro{\letdif}
% \hfill(preamble only)
%
% The \cs{letdif} command has two arguments~--- the first is the newly-defined 
% command and the second is the control sequence \emph{name} of a math character, 
% that is, a command without its backslash. For example,
% \begin{Verbatim}
% \letdif{\vr}{delta}
% \end{Verbatim}
% then |\vr| will produce a $\delta$ (|\delta|) with automatic skip 
% before it.
%
% Through the \cs{letdif} command, we can redefine a math character command 
% by its name. For example, 
% \begin{Verbatim}
% \letdif{\delta}{delta}
% \end{Verbatim}
% then |\delta| itself will be a differential operator.
%
% The second argument \meta{csname} of \cs{letdif} command can be used 
% repeatedly.
%
% \noindent\textcolor{titlecolor}{\cs{letdif*}\marg{cmd}\marg{csname}}\DescribeMacro{\letdif*}
% \hfill(preamble only)
%
% This command is basically the same as \cs{letdif}, but this command will 
% patch a correction after the differential operator. This is very useful 
% when a math font is setted through \pkg{unicode-math} package. For example, 
% \begin{Verbatim}
% \usepackage{unicode-math}
% \setmathfont{TeX Gyre Termes Math}
% \usepackage{fixdif}
% \letdif{\vr}{updelta}
% \end{Verbatim}
% this will cause bad negative skip after |\vr|, but if you change the last 
% line into
% \begin{Verbatim}
% \letdif*{\vr}{updelta}
% \end{Verbatim}
% you will get the result correct.
%
% \subsection{Define commands with multi commands or a string}
%
% \noindent\textcolor{titlecolor}{\cs{newdif}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\newdif}
% \hfill(without correction, preamble only)\\
% \noindent\textcolor{titlecolor}{\cs{newdif*}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\newdif*}
% \hfill(with correction, preamble only)
%
% The first argument of these commands is the newly-defined command; and the 
% second argument should contain \emph{more than one} tokens.
% For example, if you have loaded the \pkg{xcolor} package, 
% you can use the following line:
% \begin{Verbatim}
% \newdif{\redsfd}{\textsf{\color{red}d}}
% \end{Verbatim}
% Then you get the |\redsfd| as a differential operator. Take another example,
% \begin{Verbatim}
% \newdif{\D}{\mathrm{D}}
% \end{Verbatim}
% Then you get |\D| for an uppercase upright ``D'' as a differential operator.
%
% If your second argument contains only one command like |\Delta|, 
% it's recommended to use \cs{letdif} or \cs{letdif*} instead.
%
% \cs{newdif} and \cs{newdif*} will check whether \meta{cmd} has been defined 
% already. If so, an error message will be given.
%
% \noindent\textcolor{titlecolor}{\cs{renewdif}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\renewdif}
% \hfill(without correction, preamble only)\\
% \noindent\textcolor{titlecolor}{\cs{renewdif*}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\renewdif*}
% \hfill(with correction, preamble only)
%
% These two commands are basically the same as \cs{newdif} and \cs{newdif*}. 
% The only difference is that \cs{renewdif} and \cs{renewdif*} will check 
% whether \meta{cmd} has \emph{not} been defined yet. If so, an error message 
% will be given.
%
% \section{Using differential operators temporarily}
%
% \noindent\textcolor{titlecolor}{\cs{mathdif}\marg{symbol}}\DescribeMacro{\mathdif}
% \hfill(without correction, in math mode only)\\ 
%\noindent\textcolor{titlecolor}{\cs{mathdif*}\marg{symbol}}\DescribeMacro{\mathdif*}
% \hfill(with correction, in math mode only)
%
% These two commands can be used in math mode only, more specifically, 
% after \verb|\begin{document}|. For example, \verb|$x\mathdif{\Delta}\psi$| 
% will get $x\mathdif{\Delta}\psi$.
%
% \section{Examples}
%
% This section shows how to use this package properly in your document.
%
% Take the two examples below:
% \begin{Verbatim}
% \letdif{\Delta}{Delta}       % Example 1, in preamble
% \letdif{\nabla}{nabla}       % Example 2, in preamble
% \end{Verbatim}
% Actually, the second example is more reasonable. 
% Sometimes, we take ``$\Delta$'' as laplacian (equivalent to $\nabla^2$), 
% while ``$\Delta$'' can also be regarded as a variable 
% or function at some other times. Consequently, it's better to save 
% a different command for ``$\Delta$'' as laplacian while reserve 
% \verb|\Delta| as a command for an ordinary math symbol ``$\Delta$''. 
% However, in the vast majority of cases, ``$\nabla$'' is regarded as 
% nabla operator so there is no need to save a different command for 
% ``$\nabla$''. Then we can correct the code above:
% \begin{Verbatim}
% \letdif{\laplacian}{Delta}   % Example 1, corrected, in preamble
% \end{Verbatim}
% With the \pkg{xparse} package, we can define the command in another method:
% \begin{Verbatim}
% \letdif{\nabla}{nabla}
% \DeclareDocumentCommand{ \laplacian }{ s }{
%   \IfBooleanTF{#1}{\mathdif{\Delta}}{\nabla^2}
% }
% \end{Verbatim}
% Then \verb|\laplacian| produces $\nabla^2$ and \verb|\laplacian*| 
% produces $\Delta$.
%
% \paragraph{Dealing with ``$+$'' and ``$-$''}
% If you input \verb|$-\d x$|, you'll get ``$-\d x$'' in your document. 
% However, if you think ``$-{\d x}$'' is better, you can input 
% \verb|-{\d x}|. The ``\verb|\d x|'' in a \emph{group} will be 
% regarded \textsl{ordinary} but not \textsl{inner} so that the 
% small skip will disappear. Maybe ``$-\d x$'' is just okay.
%
% \section{The source code}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%  \else
% \maketitle
%
% \begin{abstract}
% \pkg{fixDif} 宏包在 \LaTeX{} 中重定义了\cs{d}命令，
% 并提供来定义微分算子命令的接口。
%
% 本宏包不仅可用 pdf\TeX, \XeTeX{}, \LuaTeX 编译，
% 还兼容 \XeTeX{} and \LuaTeX 下的 \pkg{unicode-math} 宏包。
% \end{abstract}
%
% \tableofcontents
%
% \section{背景}
% 为求美观，我们通常会在微分算子和它前面的表达式之间保留一定的空白\footnote{See 
% \url{https://tex.stackexchange.com/questions/14821/whats-the-proper-way-to-typeset-a-differential-operator}.}. 
% 比如以下情况：
% \[f(x)\mathrm{d}x\qquad\mbox{and}\qquad f(x)\d x.\]
% 我们通常会认为左边比右边好看，在 $f(x)$ 和 $\d x$ 之间的小空白可以
% 视为$f(x)$和$\d x$的乘积符号。
%
% 因此，有些用户会喜欢定义这样的命令:
% \begin{Verbatim}
% \renewcommand\d{\mathop{\mathrm{d}}\!}
% \end{Verbatim}
% 虽然这个命令在 “行间公式” 和 “行内公式” 都很有效，但是依然存在以下三个问题:
% \begin{enumerate}
% \item "d"前面的空白在行内分式中依旧出现. 比如, |$\d y/\d x$| 会呈现为
% $\mathrm{d}y/\,\mathrm{d}x$;
%
% \item |\d| 不能用于数学模式以外的地方. 即 |\d{o}| 不能用于在文本模式下产生
% 类似``\d{o}'' 的效果;
%
% \item "d" 和它前面表达式之间的空白被视作乘积符号，而一个算符通常应该是二元的。
%
% 拿 |\cdot| ($\cdot$) 来举例.
% 当在 “行间公式” 或 “行内公式” 下 $x\cdot y$ 间的算符会保留，但在“角标公式”
% 或“脚本脚本公式”则该消失，例如 $a^{x\cdot y}$。
% 因此，该空白也应该在角标下消失，但是 |$a^{f(x)\d x}$| 出来的
% $a^{f(x)\,\mathrm{d}x}$ 依旧会存在空白，而不是期望中的 $a^{f(x)\d x}$。
% \end{enumerate}
% 如果想解决以上问题，你可以试试本宏包。
%
% \section{引言}
% 在导言区使用以下命令即可加载本宏包
% \begin{Verbatim}
% \usepackage{fixdif}
% \end{Verbatim}
% 在文档区使用以下命令
% \begin{Verbatim}
% \[ f(x)\d x,\quad\frac{\d y}{\d x},\quad\d y/\d x,\quad a^{y\d x}. \]
% \end{Verbatim}
% 将会出现
% \[f(x)\d x,\quad \frac{\d y}{\d x},\quad \d y/\d x,\quad a^{y\d x}.\]
%
% \subsection{兼容 \pkg{unicode-math}}
% 如果你已经在文档里使用 \XeTeX/\LuaTeX{} 下的 \pkg{unicode-math} 宏包，
% 那你得注意下面的问题:
% \begin{itemize}
% \item 如果要使用 \pkg{amsmath} 宏包, 请确保
% \pkg{unicode-math} 在 \pkg{amsmath} \emph{之后} 被加载。
%
% \item 最好使用 \pkg{unicode-math} 提供的 \cs{setmathfont} 命令指定数学字体
% 以避免在行内分式情况下出现多余空白的问题, 如 $\d y/\d x$.
%
% \item \pkg{fixdif}宏包 一定要在 \pkg{unicode-math} \emph{之后} 加载。
% \end{itemize}
% 因此，正确的顺序应该是
% \begin{Verbatim}
% \usepackage{amsmath}
% \usepackage{unicode-math}
% \setmathfont{...}[...]
% \usepackage{fixdif}
% \end{Verbatim}
%
% \subsection{兼容 \pkg{hyperref}}
% If you want to use the \pkg{hyperref} package simultaneously, 
% remember to load \pkg{hyperref} \emph{before} the \pkg{fixdif} package, 
% otherwise the \pkg{hyperref} package will cause conflicts.
%
% \subsection{基础命令以及宏包参数}
% \DescribeMacro{\d}
% The \pkg{fixdif} package provides a \cs{d} command for the differential 
% operator ``d'' in math mode. When in text, \cs{d} behaves just like 
% the old \cs{d} command in \LaTeX{} or plain \TeX{} as an 
% accent command. For example, 
% \begin{Verbatim}
% $\d x$ and \d x
% \end{Verbatim}
% will produce ``$\d x$ and \d x''.
%
% \paragraph{Set the font of \cs{d}}
% There are two basic package options to control the \cs{d}'s style in math 
% mode~--- \opt{rm} and \opt{normal}. The default option is \opt{rm}, in which 
% case |$f(x)\d x$| produces $f(x)\d x$. If you chose the \opt{normal} option, 
% for example
% \begin{Verbatim}
% \usepackage[normal]{fixdif}
% \end{Verbatim}
% |$f(x)\d x$| would produces $f(x)\,dx$.
%
% \DescribeMacro{\resetdfont}
% Besides the previous two optional fonts, you can reset the font of 
% differential operator ``d'' through \cs{resetdfont} command in preamble:
% \begin{Verbatim}
% \resetdfont{\mathsf}
% \end{Verbatim}
% then |\d x| will produce $\mathsf{d}x$.
%
% \paragraph{Control the behavior of \cs{partial}}
% \DescribeMacro{\partial}
% In default, \cs{partial} will also be regarded as a differential operator 
% in this package. If you don't like this default setting, you can use the 
% \opt{nopartial} option:
% \begin{Verbatim}
% \usepackage[nopartial]{fixdif}
% \end{Verbatim}
%
% \section{微分算子的定义}
% \noindent\emph{Attention! The commands in this section 
% can be used in preamble only!}
%
% \subsection{单命令定义}
% \noindent\textcolor{titlecolor}{\cs{letdif}\marg{cmd}\marg{csname}}\DescribeMacro{\letdif}
% \hfill(preamble only)
%
% The \cs{letdif} command has two arguments~--- the first is the newly-defined 
% command and the second is the control sequence \emph{name} of a math character, 
% that is, a command without its backslash. For example,
% \begin{Verbatim}
% \letdif{\vr}{delta}
% \end{Verbatim}
% then |\vr| will produce a $\delta$ (|\delta|) with automatic skip 
% before it.
%
% Through the \cs{letdif} command, we can redefine a math character command 
% by its name. For example, 
% \begin{Verbatim}
% \letdif{\delta}{delta}
% \end{Verbatim}
% then |\delta| itself will be a differential operator.
%
% The second argument \meta{csname} of \cs{letdif} command can be used 
% repeatedly.
%
% \noindent\textcolor{titlecolor}{\cs{letdif*}\marg{cmd}\marg{csname}}\DescribeMacro{\letdif*}
% \hfill(preamble only)
%
% This command is basically the same as \cs{letdif}, but this command will 
% patch a correction after the differential operator. This is very useful 
% when a math font is setted through \pkg{unicode-math} package. For example, 
% \begin{Verbatim}
% \usepackage{unicode-math}
% \setmathfont{TeX Gyre Termes Math}
% \usepackage{fixdif}
% \letdif{\vr}{updelta}
% \end{Verbatim}
% this will cause bad negative skip after |\vr|, but if you change the last 
% line into
% \begin{Verbatim}
% \letdif*{\vr}{updelta}
% \end{Verbatim}
% you will get the result correct.
%
% \subsection{多命令或字符串定义}
%
% \noindent\textcolor{titlecolor}{\cs{newdif}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\newdif}
% \hfill(without correction, preamble only)\\
% \noindent\textcolor{titlecolor}{\cs{newdif*}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\newdif*}
% \hfill(with correction, preamble only)
%
% The first argument of these commands is the newly-defined command; and the 
% second argument should contain \emph{more than one} tokens.
% For example, if you have loaded the \pkg{xcolor} package, 
% you can use the following line:
% \begin{Verbatim}
% \newdif{\redsfd}{\textsf{\color{red}d}}
% \end{Verbatim}
% Then you get the |\redsfd| as a differential operator. Take another example,
% \begin{Verbatim}
% \newdif{\D}{\mathrm{D}}
% \end{Verbatim}
% Then you get |\D| for an uppercase upright ``D'' as a differential operator.
%
% If your second argument contains only one command like |\Delta|, 
% it's recommended to use \cs{letdif} or \cs{letdif*} instead.
%
% \cs{newdif} and \cs{newdif*} will check whether \meta{cmd} has been defined 
% already. If so, an error message will be given.
%
% \noindent\textcolor{titlecolor}{\cs{renewdif}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\renewdif}
% \hfill(without correction, preamble only)\\
% \noindent\textcolor{titlecolor}{\cs{renewdif*}\marg{cmd}\marg{multi-cmd}}\DescribeMacro{\renewdif*}
% \hfill(with correction, preamble only)
%
% These two commands are basically the same as \cs{newdif} and \cs{newdif*}. 
% The only difference is that \cs{renewdif} and \cs{renewdif*} will check 
% whether \meta{cmd} has \emph{not} been defined yet. If so, an error message 
% will be given.
%
% \section{暂时使用微分算子}
%
% \noindent\textcolor{titlecolor}{\cs{mathdif}\marg{symbol}}\DescribeMacro{\mathdif}
% \hfill(without correction, in math mode only)\\ 
%\noindent\textcolor{titlecolor}{\cs{mathdif*}\marg{symbol}}\DescribeMacro{\mathdif*}
% \hfill(with correction, in math mode only)
%
% These two commands can be used in math mode only, more specifically, 
% after \verb|\begin{document}|. For example, \verb|$x\mathdif{\Delta}\psi$| 
% will get $x\mathdif{\Delta}\psi$.
%
% \section{参考示例}
%
% This section shows how to use this package properly in your document.
%
% Take the two examples below:
% \begin{Verbatim}
% \letdif{\Delta}{Delta}       % Example 1, in preamble
% \letdif{\nabla}{nabla}       % Example 2, in preamble
% \end{Verbatim}
% Actually, the second example is more reasonable. 
% Sometimes, we take ``$\Delta$'' as laplacian (equivalent to $\nabla^2$), 
% while ``$\Delta$'' can also be regarded as a variable 
% or function at some other times. Consequently, it's better to save 
% a different command for ``$\Delta$'' as laplacian while reserve 
% \verb|\Delta| as a command for an ordinary math symbol ``$\Delta$''. 
% However, in the vast majority of cases, ``$\nabla$'' is regarded as 
% nabla operator so there is no need to save a different command for 
% ``$\nabla$''. Then we can correct the code above:
% \begin{Verbatim}
% \letdif{\laplacian}{Delta}   % Example 1, corrected, in preamble
% \end{Verbatim}
% With the \pkg{xparse} package, we can define the command in another method:
% \begin{Verbatim}
% \letdif{\nabla}{nabla}
% \DeclareDocumentCommand{ \laplacian }{ s }{
%   \IfBooleanTF{#1}{\mathdif{\Delta}}{\nabla^2}
% }
% \end{Verbatim}
% Then \verb|\laplacian| produces $\nabla^2$ and \verb|\laplacian*| 
% produces $\Delta$.
%
% \paragraph{Dealing with ``$+$'' and ``$-$''}
% If you input \verb|$-\d x$|, you'll get ``$-\d x$'' in your document. 
% However, if you think ``$-{\d x}$'' is better, you can input 
% \verb|-{\d x}|. The ``\verb|\d x|'' in a \emph{group} will be 
% regarded \textsl{ordinary} but not \textsl{inner} so that the 
% small skip will disappear. Maybe ``$-\d x$'' is just okay.
%
% \section{源代码}
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
% \fi
% Check the \TeX{} format and provides the package name.
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fixdif}[2022/7/19 Interface for defining differential operators.]
%    \end{macrocode}
% 
% \subsection{Control the skip between slashes and differential operator}
% Change the math code of slash ($/$) and backslash ($\backslash$) so that the skip 
% between slashes and differential operators can be ignored.
%    \begin{macrocode}
\@ifpackageloaded{unicode-math}{
%    \end{macrocode}
% If the \pkg{unicode-math} package has been loaded, use the \XeTeX/\LuaTeX{} primitive 
% \cs{Umathcode} to change the type of slashes. The numeral ``4'' stands for ``open''.
%    \begin{macrocode}
  \Umathcode`\/="4 "0 "002F
  \Umathcode"2044="4 "0 "2044
  \Umathcode"2215="4 "0 "2215
  \Umathcode"2F98="4 "0 "2F98
  \Umathcode`\\="4 "0 "005C
  \Umathcode"2216="4 "0 "2216
  \Umathcode"29F5="4 "0 "29F5
  \Umathcode"29F9="4 "0 "29F9
}{
%    \end{macrocode}
% If the \pkg{unicode-math} package has not been loaded, use the \TeX{} primitive 
% \cs{mathcode} to change the type of slashes. The \cs{backslash} needs to be redefined 
% through \cs{delimiter} primitive too.
%    \begin{macrocode}
  \mathcode`\/="413D
  \mathcode`\\="426E % \backslash
  \def\backslash{\delimiter"426E30F\relax}
}
%    \end{macrocode}
% 
% \subsection{Patch the skips around the differential operator}
% \DescribeMacro{\mup@tch}
% The following \cs{mup@tch} patches the skip after the differential operator.
%    \begin{macrocode}
\def\mup@tch{\mathchoice{\mskip-\thinmuskip}{\mskip-\thinmuskip}{}{}}
%    \end{macrocode}
% The \cs{s@beforep@tch} patches the commands with star (\cs{letdif*}, etc).
%    \begin{macrocode}
\def\s@beforep@tch{\mathchoice{}{}{\mbox{}}{\mbox{}}}
%    \end{macrocode}
% 
% \subsection{Declare the package options}
% Declare the options of the package and execute them.
%    \begin{macrocode}
\DeclareOption{rm}{\@ifpackageloaded{unicode-math}
  {\def\@@dif{\symrm{d}}}{\def\@@dif{\mathrm{d}}}}
\DeclareOption{normal}{\def\@@dif{d}}
\DeclareOption{partial}{\def\fixdif@partial@bool{1}}
\DeclareOption{nopartial}{\def\fixdif@partial@bool{0}}
\ExecuteOptions{rm,partial}
\ProcessOptions\relax
%    \end{macrocode}
% Control the behavior of \cs{partial}.
%    \begin{macrocode}
\def\fixdif@partial@true{1}
\ifx\fixdif@partial@bool\fixdif@partial@true
  \AtEndOfPackage{\letdif{\partial}{partial}}
\fi
%    \end{macrocode}
% \DescribeMacro{\resetdfont}
% Define the \cs{resetdfont} command.
%    \begin{macrocode}
\gdef\resetdfont#1{\let\@@dif\relax%
  \def\@@dif{#1{d}}}
%    \end{macrocode}
% 
% \subsection{Deal with the \cs{d} command}
% \DescribeMacro{\@dif}
% \cs{@dif} is the differential operator produced by \cs{d} in math mode. 
% Here we prefer \cs{mathinner} to |\mathbin| to make the skip.
%    \begin{macrocode}
\def\@dif{\mathinner{\@@dif}\mup@tch}
%    \end{macrocode}
% \DescribeMacro{\d@accent}
% Restore the \cs{d} command in text by \cs{d@accent} with the \cs{let} 
% primitive.
%    \begin{macrocode}
\let\d@accent\d
%    \end{macrocode}
% \DescribeMacro{\d}
% Redefine the \cs{d} command. In text, we need to expand the stuffs after \cs{d}
%    \begin{macrocode}
\DeclareRobustCommand\d{\ifmmode\@dif\else\expandafter\d@accent\fi}
%    \end{macrocode}
% 
% \subsection{User's interface for defining new differential operators}
% \DescribeMacro{\letdif}\DescribeMacro{\letdif*}
% Define the \cs{letdif} and \cs{letdif*} command. The internal version of \cs{letdif} 
% is \cs{@letdif}, of \cs{letdif*} is \cs{s@letdif}.
%    \begin{macrocode}
\def\@letdif#1#2{\AtBeginDocument{%
%    \end{macrocode}
% |#1| is the final command; |#2| is the ``control sequence name'' of |#1|'s initial definition.
% Here we create a command (\cs{csname}|#2@old|\cs{endcsname}) to restore |#2|.
%    \begin{macrocode}
  \ifcsname #2@old\endcsname\else%
  \expandafter\let\csname #2@old\expandafter\endcsname
    \csname #2\endcsname%
  \fi%
%    \end{macrocode}
% Finally let |#1| be the new command.
%    \begin{macrocode}
  \gdef#1{\mathinner{\csname #2@old\endcsname}\mup@tch}%
}}
%    \end{macrocode}
% The definition of \cs{s@letdif} is similar, but with the patch for negative skips.
%    \begin{macrocode}
\def\s@letdif#1#2{\AtBeginDocument{%
  \ifcsname #2@old\endcsname\else%
  \expandafter\let\csname #2@old\expandafter\endcsname
    \csname #2\endcsname%
  \fi%
  \gdef#1{\mathinner{\s@beforep@tch\csname #2@old\endcsname\mbox{}}\mup@tch}%
}}
\def\letdif{\@ifstar\s@letdif\@letdif}
%    \end{macrocode}
% \DescribeMacro{\newdif}\DescribeMacro{\newdif*}
% Define the \cs{newdif} and \cs{newdif*} commands. |#1| is the final command; |#2| is the ``long'' argument.
%    \begin{macrocode}
\long\def\@newdif#1#2{\AtBeginDocument{%
  \ifdefined#1
    \PackageError{fixdif}{\string#1 is already defined.}
      {Try another command instead of \string#1.}%
  \else
    \long\gdef#1{\mathinner{#2}\mup@tch}%
  \fi%
}}
\long\def\s@newdif#1#2{\AtBeginDocument{%
  \ifdefined#1
  \PackageError{fixdif}{\string#1 is already defined.}
    {Try another command instead of \string#1.}%
  \else
    \long\gdef#1{\s@beforep@tch\mathinner{#2\mbox{}}\mup@tch}%
  \fi%
}}
\def\newdif{\@ifstar\s@newdif\@newdif}
%    \end{macrocode}
% \DescribeMacro{\renewdif}\DescribeMacro{\renewdif*}
% Define the \cs{renewdif} and \cs{renewdif*} commands.
%    \begin{macrocode}
\long\def\@renewdif#1#2{\AtBeginDocument{%
  \ifdefined#1
    \long\gdef#1{\mathinner{#2}\mup@tch}%
  \else
    \PackageError{fixdif}{\string#1 has not been defined yet.}
      {You should use \string\newdif instead of \string\renewdif.}%
  \fi%
}}
\long\def\s@renewdif#1#2{\AtBeginDocument{%
  \ifdefined#1
    \long\gdef#1{\s@beforep@tch\mathinner{#2\mbox{}}\mup@tch}%
  \else
    \PackageError{fixdif}{\string#1 has not been defined yet.}
      {You should use \string\newdif instead of \string\renewdif.}%
  \fi%
}}
\def\renewdif{\@ifstar\s@renewdif\@renewdif}
%    \end{macrocode}
% \subsection{In-document commands: \cs{mathdif} and \cs{mathdif*}}
%    \begin{macrocode}
\def\@mathdif#1{\mathinner{#1}\mup@tch}
\def\s@mathdif#1{\s@beforep@tch\mathinner{#1\mbox{}}\mup@tch}
\DeclareRobustCommand\mathdif{\@ifstar\s@mathdif\@mathdif}
%    \end{macrocode}
% End of the package.
%    \begin{macrocode}
%</package>
%    \end{macrocode}
\endinput